{
  "address": "0x5Fec74B711EdE9828eddfb7A0370BD28D075fdeF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "ens_",
          "type": "address"
        },
        {
          "internalType": "contract IGatewayVerifier",
          "name": "verifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "dnsEncodedReverseName_",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "urls_",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "request",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callback",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "carry",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "UnknownResolverProfile",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "Unreachable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        }
      ],
      "name": "GatewayURLsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "carry",
          "type": "bytes"
        }
      ],
      "name": "fetchCallback",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "carry",
          "type": "bytes"
        }
      ],
      "name": "fetchNameCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayURLs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        }
      ],
      "name": "setGatewayURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc605c0aec67323e03c1af2a9cb491bc5510bac30d412e974421110d40198064a",
  "receipt": {
    "to": null,
    "from": "0x69420f05A11f617B4B74fFe2E04B2D300dFA556F",
    "contractAddress": "0x5Fec74B711EdE9828eddfb7A0370BD28D075fdeF",
    "transactionIndex": 62,
    "gasUsed": "2348917",
    "logsBloom": "0x
    "blockHash": "0x723c566c46f0378a6471c154013954b4e90f141414a96a32401d5deb2cd2760c",
    "transactionHash": "0xc605c0aec67323e03c1af2a9cb491bc5510bac30d412e974421110d40198064a",
    "logs": [
      {
        "transactionIndex": 62,
        "blockNumber": 8113950,
        "transactionHash": "0xc605c0aec67323e03c1af2a9cb491bc5510bac30d412e974421110d40198064a",
        "address": "0x5Fec74B711EdE9828eddfb7A0370BD28D075fdeF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000343431e9ceb7c19cc8d3ea0ee231bff82b584910"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x723c566c46f0378a6471c154013954b4e90f141414a96a32401d5deb2cd2760c"
      }
    ],
    "blockNumber": 8113950,
    "cumulativeGasUsed": "7719786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x343431e9CEb7C19cC8d3eA0EE231bfF82B584910",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x5e2a4f6c4cc16b27424249eedb15326207c9ee44",
    "0x00000BeEF055f7934784D6d81b6BC86665630dbA",
    "0x083830303636656565077265766572736500",
    [
      "https://lb.drpc.org/gateway/unruggable?network=arbitrum-sepolia"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "44668d55481c698d2c09a0ae5635a24c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"ens_\",\"type\":\"address\"},{\"internalType\":\"contract IGatewayVerifier\",\"name\":\"verifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dnsEncodedReverseName_\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"urls_\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callback\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"carry\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"UnknownResolverProfile\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"Unreachable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"}],\"name\":\"GatewayURLsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"carry\",\"type\":\"bytes\"}],\"name\":\"fetchCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"carry\",\"type\":\"bytes\"}],\"name\":\"fetchNameCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayURLs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"}],\"name\":\"setGatewayURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"dnsEncodedReverseName_\":\"The DNS encoded reverse name.\",\"ens_\":\"The ENS registry contract.\",\"owner_\":\"The owner of the contract, able to modify the gateway URLs.\",\"target_\":\"The target registrar contract on the L2 chain.\",\"urls_\":\"The verifier gateway URLs.\",\"verifier_\":\"The gateway verifier contract, unique to each L2 chain.\"}},\"fetchNameCallback(bytes[],uint8,bytes)\":{\"details\":\"If the returned value is empty, data is returned from the default resolver.\",\"params\":{\"carry\":\"The address to query the default resolver for, ABI encoded.\",\"values\":\"The values returned from the verifier contract.               Should be a single value.\"},\"returns\":{\"_0\":\"The name for the given address, ABI encoded.\"}},\"gatewayURLs()\":{\"returns\":{\"_0\":\"The gateway URLs.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolve(bytes,bytes)\":{\"params\":{\"data\":\"The resolver calldata.\",\"name\":\"The DNS encoded ENS name to query.\"},\"returns\":{\"result\":\"The result of the call.\"}},\"setGatewayURLs(string[])\":{\"params\":{\"urls\":\"The new gateway URLs.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"L1 Reverse Resolver\",\"version\":1},\"userdoc\":{\"errors\":{\"UnknownResolverProfile(bytes4)\":[{\"notice\":\"Thrown when the resolver profile is unknown.\"}],\"Unreachable(bytes)\":[{\"notice\":\"Thrown when the name is not reachable in this resolver's namespace.\"}]},\"events\":{\"GatewayURLsChanged(string[])\":{\"notice\":\"Emitted when the gateway URLs are changed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets the initial state of the contract.\"},\"fetchNameCallback(bytes[],uint8,bytes)\":{\"notice\":\"Callback function, called by the verifier contract.\"},\"gatewayURLs()\":{\"notice\":\"Gets the gateway URLs.\"},\"resolve(bytes,bytes)\":{\"notice\":\"Resolves and verifies `name` records on the target L2 chain's registrar contract,         or falls back to the default resolver if the name is not found.         Also supports `addr` calls for the L2 chain's reverse namespace,         which resolves to the target L2 chain's registrar contract.\"},\"setGatewayURLs(string[])\":{\"notice\":\"Sets the gateway URLs.\"}},\"notice\":\"Resolves reverse records for an L2 chain. Deployed on the L1 chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/L1ReverseResolver.sol\":\"L1ReverseResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-v5/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-v5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@unruggable/gateways/contracts/GatewayFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GatewayRequest} from './GatewayRequest.sol';\\nimport {IGatewayVerifier} from './IGatewayVerifier.sol';\\nimport {IGatewayProtocol} from './IGatewayProtocol.sol';\\n\\nerror OffchainLookup(\\n    address from,\\n    string[] urls,\\n    bytes request,\\n    bytes4 callback,\\n    bytes carry\\n);\\n\\nabstract contract GatewayFetchTarget {\\n    struct Session {\\n        IGatewayVerifier verifier;\\n        bytes context;\\n        GatewayRequest req;\\n        bytes4 callback;\\n        bytes carry;\\n    }\\n\\n    function fetch(\\n        IGatewayVerifier verifier,\\n        GatewayRequest memory req,\\n        bytes4 callback\\n    ) internal view {\\n        fetch(verifier, req, callback, '', new string[](0));\\n    }\\n\\n    function fetch(\\n        IGatewayVerifier verifier,\\n        GatewayRequest memory req,\\n        bytes4 callback,\\n        bytes memory carry,\\n        string[] memory urls\\n    ) internal view {\\n        bytes memory context = verifier.getLatestContext();\\n        if (urls.length == 0) urls = verifier.gatewayURLs();\\n        revert OffchainLookup(\\n            address(this),\\n            urls,\\n            abi.encodeCall(IGatewayProtocol.proveRequest, (context, req)),\\n            this.fetchCallback.selector,\\n            abi.encode(Session(verifier, context, req, callback, carry))\\n        );\\n    }\\n\\n    function fetchCallback(\\n        bytes calldata response,\\n        bytes calldata carry\\n    ) external view {\\n        Session memory ses = abi.decode(carry, (Session));\\n        (bytes[] memory values, uint8 exitCode) = ses.verifier.getStorageValues(\\n            ses.context,\\n            ses.req,\\n            response\\n        );\\n        (bool ok, bytes memory ret) = address(this).staticcall(\\n            abi.encodeWithSelector(ses.callback, values, exitCode, ses.carry)\\n        );\\n        if (ok) {\\n            assembly {\\n                return(add(ret, 32), mload(ret))\\n            }\\n        } else {\\n            assembly {\\n                revert(add(ret, 32), mload(ret))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f1ef19578f1568809dcd99521f528ba5f481cd447218f5183390606adf0a1d9\",\"license\":\"MIT\"},\"@unruggable/gateways/contracts/GatewayFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GatewayRequest, GatewayOP} from './GatewayRequest.sol';\\n\\n// only happens during request construction\\nerror RequestOverflow();\\n\\nlibrary GatewayFetcher {\\n    // verifier execution is only constrainted by stack and gas\\n    // max outputs = 255\\n    // NOTE: this is developer configurable\\n    uint256 constant MAX_OPS = 8192;\\n\\n    using GatewayFetcher for GatewayRequest;\\n\\n    function newRequest(\\n        uint8 outputs\\n    ) internal pure returns (GatewayRequest memory) {\\n        return newCommand().addByte(outputs);\\n    }\\n\\n    function newCommand() internal pure returns (GatewayRequest memory) {\\n        bytes memory v = new bytes(MAX_OPS);\\n        assembly {\\n            mstore(v, 0) // length = 0\\n        }\\n        return GatewayRequest(v);\\n    }\\n\\n    function encode(\\n        GatewayRequest memory r\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(r.ops);\\n    }\\n\\n    function addByte(\\n        GatewayRequest memory r,\\n        uint8 i\\n    ) internal pure returns (GatewayRequest memory) {\\n        bytes memory v = r.ops;\\n        uint256 n = v.length;\\n        if (n >= MAX_OPS) revert RequestOverflow();\\n        assembly {\\n            mstore(v, add(n, 1)) // length += 1\\n            mstore8(add(add(v, 32), n), i) // append(i)\\n        }\\n        return r;\\n    }\\n    function addBytes(\\n        GatewayRequest memory r,\\n        bytes memory v\\n    ) internal pure returns (GatewayRequest memory) {\\n        bytes memory buf = r.ops;\\n        if (r.ops.length + v.length >= MAX_OPS) revert RequestOverflow();\\n        assembly {\\n            let dst := add(add(buf, 32), mload(buf)) // ptr to write\\n            let src := add(v, 32) // ptr to start read\\n            for {\\n                let src_end := add(src, mload(v)) // ptr to stop read\\n            } lt(src, src_end) {\\n                src := add(src, 32)\\n                dst := add(dst, 32)\\n            } {\\n                mstore(dst, mload(src)) // copy word\\n            }\\n            mstore(buf, add(mload(buf), mload(v))) // length += v.length\\n        }\\n        return r;\\n    }\\n\\n    function debug(\\n        GatewayRequest memory r,\\n        string memory label\\n    ) internal pure returns (GatewayRequest memory) {\\n        bytes memory v = bytes(label);\\n        if (v.length >= 256) revert RequestOverflow();\\n        return r.addByte(GatewayOP.DEBUG).addByte(uint8(v.length)).addBytes(v);\\n    }\\n\\n    function push(\\n        GatewayRequest memory r,\\n        bool x\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(x ? 1 : 0);\\n    }\\n    function push(\\n        GatewayRequest memory r,\\n        bytes32 x\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(uint256(x));\\n    }\\n    function push(\\n        GatewayRequest memory r,\\n        address x\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(uint160(x));\\n    }\\n    function push(\\n        GatewayRequest memory r,\\n        uint256 x\\n    ) internal pure returns (GatewayRequest memory) {\\n        // NOTE: compact request building is not necessary\\n        // this could just be: return r.addByte(GatewayOP.PUSH_32).addBytes(abi.encode(x));\\n        if (x == 0) return r.addByte(GatewayOP.PUSH_0);\\n        uint8 n = clz(x); // number of leading zeros\\n        x <<= (n << 3); // right pad\\n        n = 32 - n; // width w/o pad\\n        r.addByte(GatewayOP.PUSH_0 + n);\\n        bytes memory v = r.ops;\\n        assembly {\\n            let len := mload(v)\\n            mstore(add(add(v, 32), len), x) // append(x)\\n            mstore(v, add(len, n)) // length += n\\n        }\\n        return r;\\n    }\\n    function clz(uint256 x) private pure returns (uint8 n) {\\n        if (x < (1 << 128)) {\\n            x <<= 128;\\n            n |= 16;\\n        }\\n        if (x < (1 << 192)) {\\n            x <<= 64;\\n            n |= 8;\\n        }\\n        if (x < (1 << 224)) {\\n            x <<= 32;\\n            n |= 4;\\n        }\\n        if (x < (1 << 240)) {\\n            x <<= 16;\\n            n |= 2;\\n        }\\n        if (x < (1 << 248)) {\\n            n |= 1;\\n        }\\n    }\\n\\n    function push(\\n        GatewayRequest memory r,\\n        string memory s\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(bytes(s));\\n    }\\n    function push(\\n        GatewayRequest memory r,\\n        GatewayRequest memory p\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(p.encode());\\n    }\\n    function push(\\n        GatewayRequest memory r,\\n        bytes memory v\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.PUSH_BYTES).push(v.length).addBytes(v);\\n    }\\n\\n    function getSlot(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.GET_SLOT);\\n    }\\n    function getTarget(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.GET_TARGET);\\n    }\\n    function stackCount(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.STACK_SIZE);\\n    }\\n    function isContract(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.IS_CONTRACT);\\n    }\\n\\n    function pushStack(\\n        GatewayRequest memory r,\\n        uint256 i\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(i).addByte(GatewayOP.PUSH_STACK);\\n        // r.stackCount().push(1).subtract().push(i).subtract().addByte(GatewayOP.DUP);\\n    }\\n    function pushOutput(\\n        GatewayRequest memory r,\\n        uint256 i\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(i).addByte(GatewayOP.PUSH_OUTPUT);\\n    }\\n\\n    function target(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.SET_TARGET);\\n    }\\n    function setTarget(\\n        GatewayRequest memory r,\\n        address a\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(a).target();\\n    }\\n\\n    function output(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.SET_OUTPUT);\\n    }\\n    function setOutput(\\n        GatewayRequest memory r,\\n        uint8 i\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(i).output();\\n    }\\n    function eval(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(true).evalIf();\\n    }\\n    function evalIf(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.EVAL);\\n    }\\n    function evalLoop(\\n        GatewayRequest memory r,\\n        uint8 flags\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.evalLoop(flags, 255);\\n    }\\n    function evalLoop(\\n        GatewayRequest memory r,\\n        uint8 flags,\\n        uint256 count\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(count).addByte(GatewayOP.EVAL_LOOP).addByte(flags);\\n    }\\n    function exit(\\n        GatewayRequest memory r,\\n        uint8 exitCode\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(false).assertNonzero(exitCode);\\n    }\\n    function assertNonzero(\\n        GatewayRequest memory r,\\n        uint8 exitCode\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.ASSERT).addByte(exitCode);\\n    }\\n    function requireContract(\\n        GatewayRequest memory r,\\n        uint8 exitCode\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.isContract().assertNonzero(exitCode);\\n    }\\n    function requireNonzero(\\n        GatewayRequest memory r,\\n        uint8 exitCode\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.dup().assertNonzero(exitCode);\\n    }\\n\\n    function setSlot(\\n        GatewayRequest memory r,\\n        uint256 x\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(x).slot();\\n    }\\n    function offset(\\n        GatewayRequest memory r,\\n        uint256 dx\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(dx).addSlot();\\n    }\\n    function addSlot(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.ADD_SLOT);\\n        // return r.getSlot().add().slot();\\n    }\\n    function slot(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.SET_SLOT);\\n    }\\n    function follow(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.FOLLOW);\\n        // return r.getSlot().concat().keccak().slot();\\n    }\\n    function followIndex(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.getSlot().keccak().slot().addSlot();\\n    }\\n\\n    function read(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.READ_SLOT);\\n    }\\n    function read(\\n        GatewayRequest memory r,\\n        uint256 n\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(n).addByte(GatewayOP.READ_SLOTS);\\n    }\\n    function readBytes(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.READ_BYTES);\\n    }\\n    function readHashedBytes(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.READ_HASHED_BYTES);\\n    }\\n    function readArray(\\n        GatewayRequest memory r,\\n        uint256 step\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(step).addByte(GatewayOP.READ_ARRAY);\\n    }\\n\\n    function pop(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.POP);\\n    }\\n    function dup(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.dup(0);\\n    }\\n    function dup(\\n        GatewayRequest memory r,\\n        uint256 back\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(back).addByte(GatewayOP.DUP);\\n    }\\n    function swap(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.swap(1);\\n    }\\n    function swap(\\n        GatewayRequest memory r,\\n        uint256 back\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(back).addByte(GatewayOP.SWAP);\\n    }\\n\\n    function concat(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.CONCAT);\\n    }\\n    function keccak(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.KECCAK);\\n    }\\n    function slice(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.SLICE);\\n    }\\n    function slice(\\n        GatewayRequest memory r,\\n        uint256 pos,\\n        uint256 len\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(pos).push(len).slice();\\n    }\\n    function length(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.LENGTH);\\n    }\\n\\n    function plus(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.PLUS);\\n    }\\n    function twosComplement(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.not().push(1).plus();\\n    }\\n    function subtract(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.twosComplement().plus();\\n    }\\n    function times(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.TIMES);\\n    }\\n    function divide(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.DIVIDE);\\n    }\\n    function mod(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.MOD);\\n    }\\n    function pow(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.POW);\\n    }\\n    function and(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.AND);\\n    }\\n    function or(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.OR);\\n    }\\n    function xor(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.XOR);\\n    }\\n    function isZero(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.IS_ZERO);\\n    }\\n    function not(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.NOT);\\n    }\\n    function shl(\\n        GatewayRequest memory r,\\n        uint8 shift\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(shift).addByte(GatewayOP.SHIFT_LEFT);\\n    }\\n    function shr(\\n        GatewayRequest memory r,\\n        uint8 shift\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.push(shift).addByte(GatewayOP.SHIFT_RIGHT);\\n    }\\n    function eq(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.EQ);\\n    }\\n    function lt(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.LT);\\n    }\\n    function gt(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.addByte(GatewayOP.GT);\\n    }\\n    function neq(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.eq().isZero();\\n    }\\n    function lte(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.gt().isZero();\\n    }\\n    function gte(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.lt().isZero();\\n    }\\n    function dup2(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.dup(1).dup(1);\\n    }\\n    function min(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.dup2().gt().addByte(GatewayOP.SWAP).pop();\\n    }\\n    function max(\\n        GatewayRequest memory r\\n    ) internal pure returns (GatewayRequest memory) {\\n        return r.dup2().lt().addByte(GatewayOP.SWAP).pop();\\n    }\\n}\\n\",\"keccak256\":\"0x8a0695ba20430566429b79702bcb2e5abf5a5753d90f1bc3b47baae61b854981\",\"license\":\"MIT\"},\"@unruggable/gateways/contracts/GatewayRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct GatewayRequest {\\n    bytes ops;\\n}\\n\\nlibrary EvalFlag {\\n    uint8 constant STOP_ON_SUCCESS = 1 << 0;\\n    uint8 constant STOP_ON_FAILURE = 1 << 1;\\n    uint8 constant ACQUIRE_STATE = 1 << 2;\\n    uint8 constant KEEP_ARGS = 1 << 3;\\n}\\n\\nlibrary GatewayOP {\\n    uint8 constant PUSH_0 = 0;\\n    uint8 constant PUSH_1 = 1;\\n    uint8 constant PUSH_2 = 2;\\n    uint8 constant PUSH_3 = 3;\\n    uint8 constant PUSH_4 = 4;\\n    uint8 constant PUSH_5 = 5;\\n    uint8 constant PUSH_6 = 6;\\n    uint8 constant PUSH_7 = 7;\\n    uint8 constant PUSH_8 = 8;\\n    uint8 constant PUSH_9 = 9;\\n    uint8 constant PUSH_10 = 10;\\n    uint8 constant PUSH_11 = 11;\\n    uint8 constant PUSH_12 = 12;\\n    uint8 constant PUSH_13 = 13;\\n    uint8 constant PUSH_14 = 14;\\n    uint8 constant PUSH_15 = 15;\\n    uint8 constant PUSH_16 = 16;\\n    uint8 constant PUSH_17 = 17;\\n    uint8 constant PUSH_18 = 18;\\n    uint8 constant PUSH_19 = 19;\\n    uint8 constant PUSH_20 = 20;\\n    uint8 constant PUSH_21 = 21;\\n    uint8 constant PUSH_22 = 22;\\n    uint8 constant PUSH_23 = 23;\\n    uint8 constant PUSH_24 = 24;\\n    uint8 constant PUSH_25 = 25;\\n    uint8 constant PUSH_26 = 26;\\n    uint8 constant PUSH_27 = 27;\\n    uint8 constant PUSH_28 = 28;\\n    uint8 constant PUSH_29 = 29;\\n    uint8 constant PUSH_30 = 30;\\n    uint8 constant PUSH_31 = 31;\\n    uint8 constant PUSH_32 = 32;\\n\\n    uint8 constant GET_SLOT = 33;\\n    uint8 constant GET_TARGET = 34;\\n    uint8 constant STACK_SIZE = 35;\\n\\tuint8 constant IS_CONTRACT = 36;\\n\\n    uint8 constant PUSH_BYTES = 40;\\n    uint8 constant PUSH_STACK = 41;\\n    uint8 constant PUSH_OUTPUT = 42;\\n\\n    uint8 constant SET_TARGET = 50;\\n    uint8 constant SET_OUTPUT = 51;\\n    uint8 constant EVAL_LOOP = 52;\\n    uint8 constant EVAL = 53;\\n    uint8 constant ASSERT = 54;\\n\\n    uint8 constant READ_SLOT = 60;\\n    uint8 constant READ_BYTES = 61;\\n    uint8 constant READ_ARRAY = 62;\\n    uint8 constant READ_HASHED_BYTES = 63;\\n    uint8 constant READ_SLOTS = 64;\\n\\n    uint8 constant SET_SLOT = 70;\\n    uint8 constant ADD_SLOT = 71;\\n    uint8 constant FOLLOW = 72;\\n\\n    uint8 constant DUP = 80;\\n    uint8 constant POP = 81;\\n    uint8 constant SWAP = 82;\\n\\n    uint8 constant KECCAK = 90;\\n    uint8 constant CONCAT = 91;\\n    uint8 constant SLICE = 92;\\n    uint8 constant LENGTH = 93;\\n\\n    uint8 constant PLUS = 100;\\n    uint8 constant TIMES = 101;\\n    uint8 constant DIVIDE = 102;\\n    uint8 constant MOD = 103;\\n\\tuint8 constant POW = 104;\\n\\n    uint8 constant AND = 110;\\n    uint8 constant OR = 111;\\n    uint8 constant XOR = 112;\\n    uint8 constant SHIFT_LEFT = 113;\\n    uint8 constant SHIFT_RIGHT = 114;\\n    uint8 constant NOT = 115;\\n\\n    uint8 constant IS_ZERO = 120;\\n    uint8 constant EQ = 121;\\n    uint8 constant LT = 122;\\n    uint8 constant GT = 123;\\n\\n    uint8 constant DEBUG = 255;\\n}\\n\",\"keccak256\":\"0x3e6ce7cae72d6d77a9a4b5644495b8621116be44511186d47efbb27ce0fc73f9\",\"license\":\"MIT\"},\"@unruggable/gateways/contracts/IGatewayProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GatewayRequest} from './GatewayRequest.sol';\\n\\ninterface IGatewayProtocol {\\n    function proveRequest(\\n        bytes memory context,\\n        GatewayRequest memory req\\n    ) external pure returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x44bfb072540c1b48081933e1f5874697e5476704f8a0f04e8cbdad6773bd9f86\",\"license\":\"MIT\"},\"@unruggable/gateways/contracts/IGatewayVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GatewayRequest} from './GatewayRequest.sol';\\n\\nerror CommitTooOld(uint256 latest, uint256 got, uint256 window);\\nerror CommitTooNew(uint256 latest, uint256 got);\\n\\ninterface IGatewayVerifier {\\n    function getLatestContext() external view returns (bytes memory);\\n    function gatewayURLs() external view returns (string[] memory);\\n\\n    function getStorageValues(\\n        bytes memory context,\\n        GatewayRequest memory req,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values, uint8 exitCode);\\n}\\n\",\"keccak256\":\"0xd56c8ace6aba1354dd4c477b566343b641f57a8c4ef88e1d84294d3727552284\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the legacy (ETH-only) addr function.\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /// Returns the address associated with an ENS node.\\n    /// @param node The ENS node to query.\\n    /// @return The associated address.\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x91dd0c350698c505d6c7e4c919da9f981d4b8d7ad062e25073fa1f6af7cb79d1\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the new (multicoin) addr function.\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x8da5dd0fc1c5ab4f47e03c23126976a86d4b2dbeac161e70e3af9e2a13330cf0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /// Returns the name associated with an ENS node, for reverse records.\\n    /// Defined in EIP181.\\n    /// @param node The ENS node to query.\\n    /// @return The associated name.\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3ab986332e0baad7aeb4b426aace3aa1c235be5efff8db4b6f1ce501bcdd9e68\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IStandaloneReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Interface for a standalone reverse registrar.\\ninterface IStandaloneReverseRegistrar {\\n    /// @notice Emitted when the name for an address is changed.\\n    ///\\n    /// @param addr The address of the reverse record.\\n    /// @param name The name of the reverse record.\\n    event NameForAddrChanged(address indexed addr, string name);\\n\\n    /// @notice Returns the name for an address.\\n    ///\\n    /// @param addr The address to get the name for.\\n    /// @return The name for the address.\\n    function nameForAddr(address addr) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x693ab3a5dcd95a80a2a4a2418ce48092d20d11da1e39d17c87ab3f1641ceaf6e\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/L1ReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC165, IERC165} from \\\"@openzeppelin/contracts-v5/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-v5/access/Ownable.sol\\\";\\nimport {GatewayFetchTarget, IGatewayVerifier} from \\\"@unruggable/gateways/contracts/GatewayFetchTarget.sol\\\";\\nimport {GatewayFetcher, GatewayRequest} from \\\"@unruggable/gateways/contracts/GatewayFetcher.sol\\\";\\n\\nimport {INameResolver} from \\\"../resolvers/profiles/INameResolver.sol\\\";\\nimport {IAddrResolver} from \\\"../resolvers/profiles/IAddrResolver.sol\\\";\\nimport {IAddressResolver} from \\\"../resolvers/profiles/IAddressResolver.sol\\\";\\nimport {HexUtils} from \\\"../utils/HexUtils.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {IStandaloneReverseRegistrar} from \\\"./IStandaloneReverseRegistrar.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\n\\n/// @title L1 Reverse Resolver\\n/// @notice Resolves reverse records for an L2 chain. Deployed on the L1 chain.\\ncontract L1ReverseResolver is\\n    GatewayFetchTarget,\\n    IExtendedResolver,\\n    ERC165,\\n    Ownable\\n{\\n    using GatewayFetcher for GatewayRequest;\\n\\n    /// @notice The ENS registry contract.\\n    ENS immutable ens;\\n\\n    /// @notice The gateway verifier contract, unique to each L2 chain.\\n    IGatewayVerifier immutable verifier;\\n\\n    /// @notice The target registrar contract on the L2 chain.\\n    address immutable target;\\n\\n    /// @notice A keccak256 hash of the DNS encoded reverse name.\\n    ///         NOT using the ENS namehash algorithm\\n    bytes32 internal immutable _dnsEncodedReverseNameHash;\\n\\n    /// @notice The length of the DNS encoded reverse name.\\n    uint256 internal immutable _dnsEncodedReverseNameLength;\\n\\n    /// @notice The namehash of 'default.reverse'\\n    bytes32 constant DEFAULT_REVERSE_NODE =\\n        0x53a2e7cce84726721578c676b4798972d354dd7c62c832415371716693edd312;\\n\\n    /// @notice Storage slot for the names mapping in the target registrar contract.\\n    uint256 internal constant NAMES_SLOT = 0;\\n\\n    /// @notice The length of an address in bytes.\\n    uint256 internal constant ADDRESS_LENGTH = 40;\\n\\n    /// @notice The verifier gateway URLs.\\n    string[] internal _urls;\\n\\n    /// @notice Emitted when the gateway URLs are changed.\\n    event GatewayURLsChanged(string[] urls);\\n\\n    /// @notice Thrown when the name is not reachable in this resolver's namespace.\\n    error Unreachable(bytes name);\\n\\n    /// @notice Thrown when the resolver profile is unknown.\\n    error UnknownResolverProfile(bytes4 selector);\\n\\n    /// @notice Sets the initial state of the contract.\\n    ///\\n    /// @param owner_ The owner of the contract, able to modify the gateway URLs.\\n    /// @param ens_ The ENS registry contract.\\n    /// @param verifier_ The gateway verifier contract, unique to each L2 chain.\\n    /// @param target_ The target registrar contract on the L2 chain.\\n    /// @param dnsEncodedReverseName_ The DNS encoded reverse name.\\n    /// @param urls_ The verifier gateway URLs.\\n    constructor(\\n        address owner_,\\n        ENS ens_,\\n        IGatewayVerifier verifier_,\\n        address target_,\\n        bytes memory dnsEncodedReverseName_,\\n        string[] memory urls_\\n    ) Ownable(owner_) {\\n        ens = ens_;\\n        verifier = verifier_;\\n        target = target_;\\n        _dnsEncodedReverseNameHash = keccak256(dnsEncodedReverseName_);\\n        _dnsEncodedReverseNameLength = dnsEncodedReverseName_.length;\\n        _urls = urls_;\\n    }\\n\\n    /// @notice Sets the gateway URLs.\\n    ///\\n    /// @param urls The new gateway URLs.\\n    function setGatewayURLs(string[] memory urls) external onlyOwner {\\n        _urls = urls;\\n        emit GatewayURLsChanged(urls);\\n    }\\n\\n    /// @notice Gets the gateway URLs.\\n    ///\\n    /// @return The gateway URLs.\\n    function gatewayURLs() external view returns (string[] memory) {\\n        return _urls;\\n    }\\n\\n    /// @notice Resolves and verifies `name` records on the target L2 chain's registrar contract,\\n    ///         or falls back to the default resolver if the name is not found.\\n    ///         Also supports `addr` calls for the L2 chain's reverse namespace,\\n    ///         which resolves to the target L2 chain's registrar contract.\\n    ///\\n    /// @param name The DNS encoded ENS name to query.\\n    /// @param data The resolver calldata.\\n    /// @return result The result of the call.\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory result) {\\n        bytes4 selector = bytes4(data);\\n\\n        bool isNamespaceCall = keccak256(name) == _dnsEncodedReverseNameHash;\\n        if (!isNamespaceCall) {\\n            if (\\n                name.length != _dnsEncodedReverseNameLength + ADDRESS_LENGTH + 1\\n            ) revert Unreachable(name);\\n            if (keccak256(name[41:]) != _dnsEncodedReverseNameHash)\\n                revert Unreachable(name);\\n        }\\n\\n        if (selector == INameResolver.name.selector) {\\n            if (isNamespaceCall) return abi.encode(\\\"\\\");\\n            (address addr, ) = HexUtils.hexToAddress(\\n                name,\\n                1,\\n                ADDRESS_LENGTH + 1\\n            );\\n            // Always throws, does not need to return.\\n            _fetchName(addr);\\n        } else if (selector == IAddressResolver.addr.selector) {\\n            if (isNamespaceCall) return abi.encode(abi.encodePacked(target));\\n            return abi.encode(\\\"\\\");\\n        }\\n\\n        revert UnknownResolverProfile(selector);\\n    }\\n\\n    /// @notice Callback function, called by the verifier contract.\\n    ///\\n    /// @dev If the returned value is empty, data is returned from the default resolver.\\n    ///\\n    /// @param values The values returned from the verifier contract.\\n    ///               Should be a single value.\\n    /// @param carry The address to query the default resolver for, ABI encoded.\\n    /// @return The name for the given address, ABI encoded.\\n    function fetchNameCallback(\\n        bytes[] memory values,\\n        uint8 /* exitCode */,\\n        bytes memory carry\\n    ) external view returns (bytes memory) {\\n        if (values[0].length == 0) {\\n            address addr = abi.decode(carry, (address));\\n            return abi.encode(_getDefaultNameFromAddr(addr));\\n        } else {\\n            return abi.encode(values[0]);\\n        }\\n    }\\n\\n    /// @dev Fetches the name for a given node using the verifier contract.\\n    ///\\n    /// @param addr The address used for the query.\\n    function _fetchName(address addr) internal view {\\n        fetch(\\n            // Verifier target\\n            verifier,\\n            // Gateway request\\n            // 1 request to L2 target registrar contract\\n            // Gets data for `names[addr]`\\n            GatewayFetcher\\n                .newRequest(1)\\n                .setTarget(target)\\n                .setSlot(NAMES_SLOT)\\n                .push(bytes32(uint256(uint160(addr))))\\n                .follow()\\n                .readBytes()\\n                .setOutput(0),\\n            // Callback function\\n            this.fetchNameCallback.selector,\\n            // Carry data, for default fallback\\n            abi.encode(addr),\\n            // Gateway URLs\\n            _urls\\n        );\\n    }\\n\\n    /// @dev Resolves the default reverse registrar, and returns the name for the given address.\\n    ///\\n    /// @param addr The address to query the default resolver for.\\n    /// @return The default name for the given address.\\n    function _getDefaultNameFromAddr(\\n        address addr\\n    ) internal view returns (string memory) {\\n        IStandaloneReverseRegistrar defaultReverseRegistrar = IStandaloneReverseRegistrar(\\n                ens.resolver(DEFAULT_REVERSE_NODE)\\n            );\\n        return defaultReverseRegistrar.nameForAddr(addr);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x81c9facc19b1d67e9c3ff51bbd4670a895fa9502f3ad33c281df590f9000b846\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /// @dev Attempts to parse bytes32 from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32, bool) {\\n        require(lastIdx - idx <= 64);\\n        (bytes memory r, bool valid) = hexToBytes(str, idx, lastIdx);\\n        if (!valid) {\\n            return (bytes32(0), false);\\n        }\\n        bytes32 ret;\\n        assembly {\\n            ret := shr(mul(4, sub(64, sub(lastIdx, idx))), mload(add(r, 32)))\\n        }\\n        return (ret, true);\\n    }\\n\\n    function hexToBytes(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes memory r, bool valid) {\\n        uint256 hexLength = lastIdx - idx;\\n        if (hexLength % 2 == 1) {\\n            revert(\\\"Invalid string length\\\");\\n        }\\n        r = new bytes(hexLength / 2);\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                mstore8(add(add(r, 32), div(sub(i, idx), 2)), combined)\\n            }\\n        }\\n    }\\n\\n    /// @dev Attempts to parse an address from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n\\n    /// @dev Format an address as a hex string.\\n    /// @param addr The address to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function addressToHex(\\n        address addr\\n    ) internal pure returns (string memory hexString) {\\n        // return bytesToHex(abi.encodePacked(addr));\\n        hexString = new string(40);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, addr)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(12, dst, 40);\\n    }\\n\\n    /// @dev Format an integer as a variable-length hex string without zero padding.\\n    /// * unpaddedUintToHex(0, true)  = \\\"0\\\"\\n    /// * unpaddedUintToHex(1, true)  = \\\"1\\\"\\n    /// * unpaddedUintToHex(0, false) = \\\"00\\\"\\n    /// * unpaddedUintToHex(1, false) = \\\"01\\\"\\n    /// @param value The number to format.\\n    /// @param dropZeroNibble If true, the leading byte will use one nibble if less than 16.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function unpaddedUintToHex(\\n        uint256 value,\\n        bool dropZeroNibble\\n    ) internal pure returns (string memory hexString) {\\n        uint256 temp = value;\\n        uint256 shift;\\n        for (uint256 b = 128; b >= 8; b >>= 1) {\\n            if (temp < (1 << b)) {\\n                shift += b; // number of zero upper bits\\n            } else {\\n                temp >>= b; // shift away lower half\\n            }\\n        }\\n        if (dropZeroNibble && temp < 16) shift += 4;\\n        uint256 nibbles = 64 - (shift >> 2);\\n        hexString = new string(nibbles);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, shl(shift, value)) // left-align\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(0, dst, nibbles);\\n    }\\n\\n    /// @dev Format bytes as a hex string.\\n    /// @param v The bytes to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function bytesToHex(\\n        bytes memory v\\n    ) internal pure returns (string memory hexString) {\\n        uint256 nibbles = v.length << 1;\\n        hexString = new string(nibbles);\\n        uint256 src;\\n        uint256 dst;\\n        assembly {\\n            src := add(v, 32)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(src, dst, nibbles);\\n    }\\n\\n    /// @dev Converts arbitrary memory to a hex string.\\n    /// @param src The memory offset of first nibble of input.\\n    /// @param dst The memory offset of first hex-char of output.\\n    /// @param nibbles The number of nibbles to convert and the byte-length of the output.\\n    function unsafeHex(\\n        uint256 src,\\n        uint256 dst,\\n        uint256 nibbles\\n    ) internal pure {\\n        unchecked {\\n            for (uint256 end = dst + nibbles; dst < end; src += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(src)\\n                }\\n                for (uint256 shift = 256; dst < end && shift > 0; dst++) {\\n                    uint256 b = (word >> (shift -= 4)) & 15; // each nibble\\n                    b = b < 10 ? b + 0x30 : b + 0x57; // (\\\"a\\\" - 10) => 0x57\\n                    assembly {\\n                        mstore8(dst, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdabfeb00a2bdc34233955d2a43ceead3bbbda6198e93889898028e31bea89d69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604051612cf7380380612cf783398101604081905261003091610354565b856001600160a01b03811661005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610068816100b4565b506001600160a01b0380861660805284811660a052831660c052815160208084019190912060e05282516101005281516100a89160019190840190610104565b50505050505050610565565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821561014a579160200282015b8281111561014a578251829061013a90826104a7565b5091602001919060010190610124565b5061015692915061015a565b5090565b8082111561015657600061016e8282610177565b5060010161015a565b5080546101839061041e565b6000825580601f10610193575050565b601f0160209004906000526020600020908101906101b191906101b4565b50565b5b8082111561015657600081556001016101b5565b6001600160a01b03811681146101b157600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561021c5761021c6101de565b604052919050565b6000806001600160401b0384111561023e5761023e6101de565b50601f8301601f1916602001610253816101f4565b91505082815283838301111561026857600080fd5b60005b8381101561028957808301516020828401015260208101905061026b565b506000602084830101529392505050565b600082601f8301126102ab57600080fd5b81516001600160401b038111156102c4576102c46101de565b8060051b6102d4602082016101f4565b918252602081850181019290810190868411156102f057600080fd5b6020860192505b8383101561034a5782516001600160401b0381111561031557600080fd5b8601603f8101881361032657600080fd5b61033888602083015160408401610224565b835250602092830192909101906102f7565b9695505050505050565b60008060008060008060c0878903121561036d57600080fd5b8651610378816101c9565b6020880151909650610389816101c9565b604088015190955061039a816101c9565b60608801519094506103ab816101c9565b60808801519093506001600160401b038111156103c757600080fd5b8701601f810189136103d857600080fd5b6103e789825160208401610224565b60a089015190935090506001600160401b0381111561040557600080fd5b61041189828a0161029a565b9150509295509295509295565b600181811c9082168061043257607f821691505b60208210810361045257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104a257806000526020600020601f840160051c8101602085101561047f5750805b601f840160051c820191505b8181101561049f576000815560010161048b565b50505b505050565b81516001600160401b038111156104c0576104c06101de565b6104d4816104ce845461041e565b84610458565b6020601f82116001811461050857600083156104f05750848201515b600019600385901b1c1916600184901b17845561049f565b600084815260208120601f198516915b828110156105385787850151825560209485019460019092019101610518565b50848210156105565786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60805160a05160c05160e051610100516127406105b7600039600061039101526000818161034b01526104070152600081816105dd0152610cd301526000610c8601526000610a4501526127406000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638e5ea8df11610076578063b50f2fbc1161005b578063b50f2fbc14610148578063e31844fe1461015d578063f2fde38b1461017057600080fd5b80638e5ea8df146101225780639061b9231461013557600080fd5b806301ffc9a7146100a857806367e05546146100d0578063715018a6146100f05780638da5cb5b146100fa575b600080fd5b6100bb6100b63660046117b8565b610183565b60405190151581526020015b60405180910390f35b6100e36100de36600461195c565b61021c565b6040516100c79190611abe565b6100f86102cd565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100f8610130366004611ad1565b6102e1565b6100e3610143366004611be5565b610337565b6101506106bc565b6040516100c79190611cd0565b6100f861016b366004611be5565b610795565b6100f861017e366004611d05565b61098d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061021657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60608360008151811061023157610231611d22565b602002602001015151600003610289576000828060200190518101906102579190611d51565b9050610262816109f1565b6040516020016102729190611abe565b6040516020818303038152906040529150506102c6565b8360008151811061029c5761029c611d22565b60200260200101516040516020016102b49190611abe565b60405160208183030381529060405290505b9392505050565b6102d5610b7b565b6102df6000610bce565b565b6102e9610b7b565b80516102fc9060019060208401906116cb565b507f91e1766c20958bc6fcd98acb2f87a586ae0d20a19f1e495c5dac2a5c5f6c9da28160405161032c9190611cd0565b60405180910390a150565b606060006103458385611d6e565b905060007f0000000000000000000000000000000000000000000000000000000000000000878760405161037a929190611dd4565b604051809103902014905080610484576103b560287f0000000000000000000000000000000000000000000000000000000000000000611e13565b6103c0906001611e13565b86146104055786866040517f9e2fd4060000000000000000000000000000000000000000000000000000000081526004016103fc929190611e6f565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610433876029818b611e83565b604051610441929190611dd4565b6040518091039020146104845786866040517f9e2fd4060000000000000000000000000000000000000000000000000000000081526004016103fc929190611e6f565b7f96e0cbcf000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610568578015610506576040516020016104ee90602080825260009082015260400190565b604051602081830303815290604052925050506106b4565b600061055688888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061055191506028905082611e13565b610c43565b50905061056281610c81565b5061065e565b7f0e3481fa000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161065e578015610643576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b166020820152603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526104ee91602001611abe565b6040516020016104ee90602080825260009082015260400190565b6040517fa427eaf90000000000000000000000000000000000000000000000000000000081527fffffffff00000000000000000000000000000000000000000000000000000000831660048201526024016103fc565b949350505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561078c5783829060005260206000200180546106ff90611ead565b80601f016020809104026020016040519081016040528092919081815260200182805461072b90611ead565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b5050505050815260200190600101906106e0565b50505050905090565b60006107a382840184611f73565b8051602082015160408084015190517fe3d1666e000000000000000000000000000000000000000000000000000000008152939450600093849373ffffffffffffffffffffffffffffffffffffffff169263e3d1666e9261080a928c908c90600401612073565b600060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261086d9190810190612113565b915091506000803073ffffffffffffffffffffffffffffffffffffffff168560600151858588608001516040516024016108a9939291906121dc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610932919061227c565b600060405180830381855afa9150503d806000811461096d576040519150601f19603f3d011682016040523d82523d6000602084013e610972565b606091505b5091509150811561098557805160208201f35b805160208201fd5b610995610b7b565b73ffffffffffffffffffffffffffffffffffffffff81166109e5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016103fc565b6109ee81610bce565b50565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081527f53a2e7cce84726721578c676b4798972d354dd7c62c832415371716693edd31260048201526060906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630178b8bf90602401602060405180830381865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac59190611d51565b6040517f4ec3bd2300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291925090821690634ec3bd2390602401600060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102c69190810190612298565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102df576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016103fc565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806028610c5285856122cd565b1015610c6357506000905080610c79565b600080610c71878787610e60565b909450925050505b935093915050565b6109ee7f0000000000000000000000000000000000000000000000000000000000000000610d1e6000610d18610d13610d0e73ffffffffffffffffffffffffffffffffffffffff8816610d0885610d027f0000000000000000000000000000000000000000000000000000000000000000610cfc6001610ebd565b90610ede565b90610eff565b90610f20565b610f39565b610f53565b90610f6d565b6040805173ffffffffffffffffffffffffffffffffffffffff861660208201527f67e05546000000000000000000000000000000000000000000000000000000009101604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526001805460208181028601810190945280855291939290919060009084015b82821015610e57578382906000526020600020018054610dca90611ead565b80601f0160208091040260200160405190810160405280929190818152602001828054610df690611ead565b8015610e435780601f10610e1857610100808354040283529160200191610e43565b820191906000526020600020905b815481529060010190602001808311610e2657829003601f168201915b505050505081526020019060010190610dab565b50505050610f91565b6000806040610e6f85856122cd565b1115610e7a57600080fd5b600080610e8887878761123d565b9150915080610ea0575060009250829150610c799050565b50602001516004858503604003021c915060019050935093915050565b60408051602081019091526060815261021682610ed861143f565b90611487565b6040805160208101909152606081526102c6610efa84846114ec565b61151b565b6040805160208101909152606081526102c6610f1b8484611535565b6115b2565b6040805160208101909152606081526102c68383611535565b604080516020810190915260608152610216826048611487565b60408051602081019091526060815261021682603d611487565b6040805160208101909152606081526102c6610f8c8460ff8516611535565b6115cc565b60008573ffffffffffffffffffffffffffffffffffffffff166387c484fe6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110249190810190612298565b905081516000036110c3578573ffffffffffffffffffffffffffffffffffffffff1663b50f2fbc6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110c091908101906122e0565b91505b308282876040516024016110d892919061238c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f31c1980f00000000000000000000000000000000000000000000000000000000179052815160a08101835273ffffffffffffffffffffffffffffffffffffffff8c1681528082018790528083018b90527fffffffff000000000000000000000000000000000000000000000000000000008a1660608201526080810189905291517fe31844fe00000000000000000000000000000000000000000000000000000000926111db929091016123b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f556f18300000000000000000000000000000000000000000000000000000000082526103fc9594939291600401612490565b606060008061124c85856122cd565b9050611259600282612548565b6001036112c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420737472696e67206c656e677468000000000000000000000060448201526064016103fc565b6112cd60028261255c565b67ffffffffffffffff8111156112e5576112e56117d3565b6040519080825280601f01601f19166020018201604052801561130f576020820181803683370190505b50925060019150855184111561132457600080fd5b6113cf565b6000603a8210602f8311161561135f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd00190565b6047821060408311161561139357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc90190565b606782106060831116156113c757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90190565b5060ff919050565b60208601855b85811015611434576113ec8183015160001a611329565b6113fe6001830184015160001a611329565b60ff811460ff8314171561141757600095505050611434565b60049190911b1780600289840304870160200153506002016113d5565b505050935093915050565b60408051602081018252606081528151612000808252612020820190935290916000919060208201818036833750506000825250604080516020810190915290815292915050565b6040805160208101909152606081528251805161200081106114d5576040517fec031c1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181018252838160208401015350929392505050565b6040805160208101909152606081526102c68373ffffffffffffffffffffffffffffffffffffffff8416611535565b604080516020810190915260608152610216826032611487565b6040805160208101909152606081528160000361155e57611557836000611487565b9050610216565b6000611569836115e6565b60f8600382901b169390931b929050611583816020612570565b905061159a611593826000612589565b8590611487565b50835180516020818301019490945292019091525090565b604080516020810190915260608152610216826046611487565b604080516020810190915260608152610216826033611487565b600070010000000000000000000000000000000082101561160c5760809190911b906010175b78010000000000000000000000000000000000000000000000008210156116385760409190911b906008175b7c01000000000000000000000000000000000000000000000000000000008210156116685760209190911b906004175b7e0100000000000000000000000000000000000000000000000000000000000082101561169a5760109190911b906002175b7f01000000000000000000000000000000000000000000000000000000000000008210156116c6576001175b919050565b828054828255906000526020600020908101928215611711579160200282015b82811115611711578251829061170190826125f1565b50916020019190600101906116eb565b5061171d929150611721565b5090565b8082111561171d576000611735828261173e565b50600101611721565b50805461174a90611ead565b6000825580601f1061175a575050565b601f0160209004906000526020600020908101906109ee91905b8082111561171d5760008155600101611774565b80357fffffffff00000000000000000000000000000000000000000000000000000000811681146116c657600080fd5b6000602082840312156117ca57600080fd5b6102c682611788565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611825576118256117d3565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611872576118726117d3565b604052919050565b600067ffffffffffffffff821115611894576118946117d3565b5060051b60200190565b600067ffffffffffffffff8211156118b8576118b86117d3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006118f76118f28461189e565b61182b565b905082815283838301111561190b57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261193357600080fd5b6102c6838335602085016118e4565b60ff811681146109ee57600080fd5b80356116c681611942565b60008060006060848603121561197157600080fd5b833567ffffffffffffffff81111561198857600080fd5b8401601f8101861361199957600080fd5b80356119a76118f28261187a565b8082825260208201915060208360051b8501019250888311156119c957600080fd5b602084015b83811015611a0b57803567ffffffffffffffff8111156119ed57600080fd5b6119fc8b602083890101611922565b845250602092830192016119ce565b509550611a1e9250505060208501611951565b9150604084013567ffffffffffffffff811115611a3a57600080fd5b611a4686828701611922565b9150509250925092565b60005b83811015611a6b578181015183820152602001611a53565b50506000910152565b60008151808452611a8c816020860160208601611a50565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006102c66020830184611a74565b600060208284031215611ae357600080fd5b813567ffffffffffffffff811115611afa57600080fd5b8201601f81018413611b0b57600080fd5b8035611b196118f28261187a565b8082825260208201915060208360051b850101925086831115611b3b57600080fd5b602084015b83811015611b9157803567ffffffffffffffff811115611b5f57600080fd5b8501603f81018913611b7057600080fd5b611b82896020830135604084016118e4565b84525060209283019201611b40565b509695505050505050565b60008083601f840112611bae57600080fd5b50813567ffffffffffffffff811115611bc657600080fd5b602083019150836020828501011115611bde57600080fd5b9250929050565b60008060008060408587031215611bfb57600080fd5b843567ffffffffffffffff811115611c1257600080fd5b611c1e87828801611b9c565b909550935050602085013567ffffffffffffffff811115611c3e57600080fd5b611c4a87828801611b9c565b95989497509550505050565b600082825180855260208501945060208160051b8301016020850160005b83811015611cc4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018852611cae838351611a74565b6020988901989093509190910190600101611c74565b50909695505050505050565b6020815260006102c66020830184611c56565b73ffffffffffffffffffffffffffffffffffffffff811681146109ee57600080fd5b600060208284031215611d1757600080fd5b81356102c681611ce3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611d6357600080fd5b81516102c681611ce3565b80357fffffffff000000000000000000000000000000000000000000000000000000008116906004841015611dcd577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561021657610216611de4565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006106b4602083018486611e26565b60008085851115611e9357600080fd5b83861115611ea057600080fd5b5050820193919092039150565b600181811c90821680611ec157607f821691505b602082108103611efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b80356116c681611ce3565b600060208284031215611f1d57600080fd5b6040516020810167ffffffffffffffff81118282101715611f4057611f406117d3565b604052905080823567ffffffffffffffff811115611f5d57600080fd5b611f6985828601611922565b8252505092915050565b600060208284031215611f8557600080fd5b813567ffffffffffffffff811115611f9c57600080fd5b820160a08185031215611fae57600080fd5b611fb6611802565b611fbf82611f00565b8152602082013567ffffffffffffffff811115611fdb57600080fd5b611fe786828501611922565b602083015250604082013567ffffffffffffffff81111561200757600080fd5b61201386828501611f0b565b60408301525061202560608301611788565b6060820152608082013567ffffffffffffffff81111561204457600080fd5b61205086828501611922565b608083015250949350505050565b60008151602084526106b46020850182611a74565b6060815260006120866060830187611a74565b8281036020840152612098818761205e565b905082810360408401526120ad818587611e26565b979650505050505050565b600082601f8301126120c957600080fd5b81516020830160006120dd6118f28461189e565b90508281528583830111156120f157600080fd5b6120ff836020830184611a50565b95945050505050565b80516116c681611942565b6000806040838503121561212657600080fd5b825167ffffffffffffffff81111561213d57600080fd5b8301601f8101851361214e57600080fd5b805161215c6118f28261187a565b8082825260208201915060208360051b85010192508783111561217e57600080fd5b602084015b838110156121c057805167ffffffffffffffff8111156121a257600080fd5b6121b18a6020838901016120b8565b84525060209283019201612183565b5094506121d39250505060208401612108565b90509250929050565b6000606082016060835280865180835260808501915060808160051b86010192506020880160005b82811015612253577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087860301845261223e858351611a74565b94506020938401939190910190600101612204565b5050505060ff8516602084015282810360408401526122728185611a74565b9695505050505050565b6000825161228e818460208701611a50565b9190910192915050565b6000602082840312156122aa57600080fd5b815167ffffffffffffffff8111156122c157600080fd5b6106b4848285016120b8565b8181038181111561021657610216611de4565b6000602082840312156122f257600080fd5b815167ffffffffffffffff81111561230957600080fd5b8201601f8101841361231a57600080fd5b80516123286118f28261187a565b8082825260208201915060208360051b85010192508683111561234a57600080fd5b602084015b83811015611b9157805167ffffffffffffffff81111561236e57600080fd5b61237d896020838901016120b8565b8452506020928301920161234f565b60408152600061239f6040830185611a74565b82810360208401526120ff818561205e565b6020815273ffffffffffffffffffffffffffffffffffffffff82511660208201526000602083015160a060408401526123ed60c0840182611a74565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848303016060850152612428828261205e565b9150507fffffffff00000000000000000000000000000000000000000000000000000000606085015116608084015260808401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160a08501526120ff8282611a74565b73ffffffffffffffffffffffffffffffffffffffff8616815260a0602082015260006124bf60a0830187611c56565b82810360408401526124d18187611a74565b90507fffffffff0000000000000000000000000000000000000000000000000000000085166060840152828103608084015261250d8185611a74565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261255757612557612519565b500690565b60008261256b5761256b612519565b500490565b60ff828116828216039081111561021657610216611de4565b60ff818116838216019081111561021657610216611de4565b601f8211156125ec57806000526020600020601f840160051c810160208510156125c95750805b601f840160051c820191505b818110156125e957600081556001016125d5565b50505b505050565b815167ffffffffffffffff81111561260b5761260b6117d3565b61261f816126198454611ead565b846125a2565b6020601f821160018114612671576000831561263b5750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556125e9565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b828110156126bf578785015182556020948501946001909201910161269f565b50848210156126fb57868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b0190555056fea26469706673582212203cb73eaf3b71503ecdf69a69bd5282048db29650910cc92db800840818fbbad964736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80638e5ea8df11610076578063b50f2fbc1161005b578063b50f2fbc14610148578063e31844fe1461015d578063f2fde38b1461017057600080fd5b80638e5ea8df146101225780639061b9231461013557600080fd5b806301ffc9a7146100a857806367e05546146100d0578063715018a6146100f05780638da5cb5b146100fa575b600080fd5b6100bb6100b63660046117b8565b610183565b60405190151581526020015b60405180910390f35b6100e36100de36600461195c565b61021c565b6040516100c79190611abe565b6100f86102cd565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100f8610130366004611ad1565b6102e1565b6100e3610143366004611be5565b610337565b6101506106bc565b6040516100c79190611cd0565b6100f861016b366004611be5565b610795565b6100f861017e366004611d05565b61098d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061021657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60608360008151811061023157610231611d22565b602002602001015151600003610289576000828060200190518101906102579190611d51565b9050610262816109f1565b6040516020016102729190611abe565b6040516020818303038152906040529150506102c6565b8360008151811061029c5761029c611d22565b60200260200101516040516020016102b49190611abe565b60405160208183030381529060405290505b9392505050565b6102d5610b7b565b6102df6000610bce565b565b6102e9610b7b565b80516102fc9060019060208401906116cb565b507f91e1766c20958bc6fcd98acb2f87a586ae0d20a19f1e495c5dac2a5c5f6c9da28160405161032c9190611cd0565b60405180910390a150565b606060006103458385611d6e565b905060007f0000000000000000000000000000000000000000000000000000000000000000878760405161037a929190611dd4565b604051809103902014905080610484576103b560287f0000000000000000000000000000000000000000000000000000000000000000611e13565b6103c0906001611e13565b86146104055786866040517f9e2fd4060000000000000000000000000000000000000000000000000000000081526004016103fc929190611e6f565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610433876029818b611e83565b604051610441929190611dd4565b6040518091039020146104845786866040517f9e2fd4060000000000000000000000000000000000000000000000000000000081526004016103fc929190611e6f565b7f96e0cbcf000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610568578015610506576040516020016104ee90602080825260009082015260400190565b604051602081830303815290604052925050506106b4565b600061055688888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061055191506028905082611e13565b610c43565b50905061056281610c81565b5061065e565b7f0e3481fa000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161065e578015610643576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b166020820152603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526104ee91602001611abe565b6040516020016104ee90602080825260009082015260400190565b6040517fa427eaf90000000000000000000000000000000000000000000000000000000081527fffffffff00000000000000000000000000000000000000000000000000000000831660048201526024016103fc565b949350505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561078c5783829060005260206000200180546106ff90611ead565b80601f016020809104026020016040519081016040528092919081815260200182805461072b90611ead565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b5050505050815260200190600101906106e0565b50505050905090565b60006107a382840184611f73565b8051602082015160408084015190517fe3d1666e000000000000000000000000000000000000000000000000000000008152939450600093849373ffffffffffffffffffffffffffffffffffffffff169263e3d1666e9261080a928c908c90600401612073565b600060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261086d9190810190612113565b915091506000803073ffffffffffffffffffffffffffffffffffffffff168560600151858588608001516040516024016108a9939291906121dc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610932919061227c565b600060405180830381855afa9150503d806000811461096d576040519150601f19603f3d011682016040523d82523d6000602084013e610972565b606091505b5091509150811561098557805160208201f35b805160208201fd5b610995610b7b565b73ffffffffffffffffffffffffffffffffffffffff81166109e5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016103fc565b6109ee81610bce565b50565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081527f53a2e7cce84726721578c676b4798972d354dd7c62c832415371716693edd31260048201526060906000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630178b8bf90602401602060405180830381865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac59190611d51565b6040517f4ec3bd2300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291925090821690634ec3bd2390602401600060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102c69190810190612298565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102df576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016103fc565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806028610c5285856122cd565b1015610c6357506000905080610c79565b600080610c71878787610e60565b909450925050505b935093915050565b6109ee7f0000000000000000000000000000000000000000000000000000000000000000610d1e6000610d18610d13610d0e73ffffffffffffffffffffffffffffffffffffffff8816610d0885610d027f0000000000000000000000000000000000000000000000000000000000000000610cfc6001610ebd565b90610ede565b90610eff565b90610f20565b610f39565b610f53565b90610f6d565b6040805173ffffffffffffffffffffffffffffffffffffffff861660208201527f67e05546000000000000000000000000000000000000000000000000000000009101604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526001805460208181028601810190945280855291939290919060009084015b82821015610e57578382906000526020600020018054610dca90611ead565b80601f0160208091040260200160405190810160405280929190818152602001828054610df690611ead565b8015610e435780601f10610e1857610100808354040283529160200191610e43565b820191906000526020600020905b815481529060010190602001808311610e2657829003601f168201915b505050505081526020019060010190610dab565b50505050610f91565b6000806040610e6f85856122cd565b1115610e7a57600080fd5b600080610e8887878761123d565b9150915080610ea0575060009250829150610c799050565b50602001516004858503604003021c915060019050935093915050565b60408051602081019091526060815261021682610ed861143f565b90611487565b6040805160208101909152606081526102c6610efa84846114ec565b61151b565b6040805160208101909152606081526102c6610f1b8484611535565b6115b2565b6040805160208101909152606081526102c68383611535565b604080516020810190915260608152610216826048611487565b60408051602081019091526060815261021682603d611487565b6040805160208101909152606081526102c6610f8c8460ff8516611535565b6115cc565b60008573ffffffffffffffffffffffffffffffffffffffff166387c484fe6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fde573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110249190810190612298565b905081516000036110c3578573ffffffffffffffffffffffffffffffffffffffff1663b50f2fbc6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110c091908101906122e0565b91505b308282876040516024016110d892919061238c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f31c1980f00000000000000000000000000000000000000000000000000000000179052815160a08101835273ffffffffffffffffffffffffffffffffffffffff8c1681528082018790528083018b90527fffffffff000000000000000000000000000000000000000000000000000000008a1660608201526080810189905291517fe31844fe00000000000000000000000000000000000000000000000000000000926111db929091016123b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f556f18300000000000000000000000000000000000000000000000000000000082526103fc9594939291600401612490565b606060008061124c85856122cd565b9050611259600282612548565b6001036112c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420737472696e67206c656e677468000000000000000000000060448201526064016103fc565b6112cd60028261255c565b67ffffffffffffffff8111156112e5576112e56117d3565b6040519080825280601f01601f19166020018201604052801561130f576020820181803683370190505b50925060019150855184111561132457600080fd5b6113cf565b6000603a8210602f8311161561135f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd00190565b6047821060408311161561139357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc90190565b606782106060831116156113c757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90190565b5060ff919050565b60208601855b85811015611434576113ec8183015160001a611329565b6113fe6001830184015160001a611329565b60ff811460ff8314171561141757600095505050611434565b60049190911b1780600289840304870160200153506002016113d5565b505050935093915050565b60408051602081018252606081528151612000808252612020820190935290916000919060208201818036833750506000825250604080516020810190915290815292915050565b6040805160208101909152606081528251805161200081106114d5576040517fec031c1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181018252838160208401015350929392505050565b6040805160208101909152606081526102c68373ffffffffffffffffffffffffffffffffffffffff8416611535565b604080516020810190915260608152610216826032611487565b6040805160208101909152606081528160000361155e57611557836000611487565b9050610216565b6000611569836115e6565b60f8600382901b169390931b929050611583816020612570565b905061159a611593826000612589565b8590611487565b50835180516020818301019490945292019091525090565b604080516020810190915260608152610216826046611487565b604080516020810190915260608152610216826033611487565b600070010000000000000000000000000000000082101561160c5760809190911b906010175b78010000000000000000000000000000000000000000000000008210156116385760409190911b906008175b7c01000000000000000000000000000000000000000000000000000000008210156116685760209190911b906004175b7e0100000000000000000000000000000000000000000000000000000000000082101561169a5760109190911b906002175b7f01000000000000000000000000000000000000000000000000000000000000008210156116c6576001175b919050565b828054828255906000526020600020908101928215611711579160200282015b82811115611711578251829061170190826125f1565b50916020019190600101906116eb565b5061171d929150611721565b5090565b8082111561171d576000611735828261173e565b50600101611721565b50805461174a90611ead565b6000825580601f1061175a575050565b601f0160209004906000526020600020908101906109ee91905b8082111561171d5760008155600101611774565b80357fffffffff00000000000000000000000000000000000000000000000000000000811681146116c657600080fd5b6000602082840312156117ca57600080fd5b6102c682611788565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611825576118256117d3565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611872576118726117d3565b604052919050565b600067ffffffffffffffff821115611894576118946117d3565b5060051b60200190565b600067ffffffffffffffff8211156118b8576118b86117d3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006118f76118f28461189e565b61182b565b905082815283838301111561190b57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261193357600080fd5b6102c6838335602085016118e4565b60ff811681146109ee57600080fd5b80356116c681611942565b60008060006060848603121561197157600080fd5b833567ffffffffffffffff81111561198857600080fd5b8401601f8101861361199957600080fd5b80356119a76118f28261187a565b8082825260208201915060208360051b8501019250888311156119c957600080fd5b602084015b83811015611a0b57803567ffffffffffffffff8111156119ed57600080fd5b6119fc8b602083890101611922565b845250602092830192016119ce565b509550611a1e9250505060208501611951565b9150604084013567ffffffffffffffff811115611a3a57600080fd5b611a4686828701611922565b9150509250925092565b60005b83811015611a6b578181015183820152602001611a53565b50506000910152565b60008151808452611a8c816020860160208601611a50565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006102c66020830184611a74565b600060208284031215611ae357600080fd5b813567ffffffffffffffff811115611afa57600080fd5b8201601f81018413611b0b57600080fd5b8035611b196118f28261187a565b8082825260208201915060208360051b850101925086831115611b3b57600080fd5b602084015b83811015611b9157803567ffffffffffffffff811115611b5f57600080fd5b8501603f81018913611b7057600080fd5b611b82896020830135604084016118e4565b84525060209283019201611b40565b509695505050505050565b60008083601f840112611bae57600080fd5b50813567ffffffffffffffff811115611bc657600080fd5b602083019150836020828501011115611bde57600080fd5b9250929050565b60008060008060408587031215611bfb57600080fd5b843567ffffffffffffffff811115611c1257600080fd5b611c1e87828801611b9c565b909550935050602085013567ffffffffffffffff811115611c3e57600080fd5b611c4a87828801611b9c565b95989497509550505050565b600082825180855260208501945060208160051b8301016020850160005b83811015611cc4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018852611cae838351611a74565b6020988901989093509190910190600101611c74565b50909695505050505050565b6020815260006102c66020830184611c56565b73ffffffffffffffffffffffffffffffffffffffff811681146109ee57600080fd5b600060208284031215611d1757600080fd5b81356102c681611ce3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611d6357600080fd5b81516102c681611ce3565b80357fffffffff000000000000000000000000000000000000000000000000000000008116906004841015611dcd577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561021657610216611de4565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006106b4602083018486611e26565b60008085851115611e9357600080fd5b83861115611ea057600080fd5b5050820193919092039150565b600181811c90821680611ec157607f821691505b602082108103611efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b80356116c681611ce3565b600060208284031215611f1d57600080fd5b6040516020810167ffffffffffffffff81118282101715611f4057611f406117d3565b604052905080823567ffffffffffffffff811115611f5d57600080fd5b611f6985828601611922565b8252505092915050565b600060208284031215611f8557600080fd5b813567ffffffffffffffff811115611f9c57600080fd5b820160a08185031215611fae57600080fd5b611fb6611802565b611fbf82611f00565b8152602082013567ffffffffffffffff811115611fdb57600080fd5b611fe786828501611922565b602083015250604082013567ffffffffffffffff81111561200757600080fd5b61201386828501611f0b565b60408301525061202560608301611788565b6060820152608082013567ffffffffffffffff81111561204457600080fd5b61205086828501611922565b608083015250949350505050565b60008151602084526106b46020850182611a74565b6060815260006120866060830187611a74565b8281036020840152612098818761205e565b905082810360408401526120ad818587611e26565b979650505050505050565b600082601f8301126120c957600080fd5b81516020830160006120dd6118f28461189e565b90508281528583830111156120f157600080fd5b6120ff836020830184611a50565b95945050505050565b80516116c681611942565b6000806040838503121561212657600080fd5b825167ffffffffffffffff81111561213d57600080fd5b8301601f8101851361214e57600080fd5b805161215c6118f28261187a565b8082825260208201915060208360051b85010192508783111561217e57600080fd5b602084015b838110156121c057805167ffffffffffffffff8111156121a257600080fd5b6121b18a6020838901016120b8565b84525060209283019201612183565b5094506121d39250505060208401612108565b90509250929050565b6000606082016060835280865180835260808501915060808160051b86010192506020880160005b82811015612253577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8087860301845261223e858351611a74565b94506020938401939190910190600101612204565b5050505060ff8516602084015282810360408401526122728185611a74565b9695505050505050565b6000825161228e818460208701611a50565b9190910192915050565b6000602082840312156122aa57600080fd5b815167ffffffffffffffff8111156122c157600080fd5b6106b4848285016120b8565b8181038181111561021657610216611de4565b6000602082840312156122f257600080fd5b815167ffffffffffffffff81111561230957600080fd5b8201601f8101841361231a57600080fd5b80516123286118f28261187a565b8082825260208201915060208360051b85010192508683111561234a57600080fd5b602084015b83811015611b9157805167ffffffffffffffff81111561236e57600080fd5b61237d896020838901016120b8565b8452506020928301920161234f565b60408152600061239f6040830185611a74565b82810360208401526120ff818561205e565b6020815273ffffffffffffffffffffffffffffffffffffffff82511660208201526000602083015160a060408401526123ed60c0840182611a74565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848303016060850152612428828261205e565b9150507fffffffff00000000000000000000000000000000000000000000000000000000606085015116608084015260808401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160a08501526120ff8282611a74565b73ffffffffffffffffffffffffffffffffffffffff8616815260a0602082015260006124bf60a0830187611c56565b82810360408401526124d18187611a74565b90507fffffffff0000000000000000000000000000000000000000000000000000000085166060840152828103608084015261250d8185611a74565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261255757612557612519565b500690565b60008261256b5761256b612519565b500490565b60ff828116828216039081111561021657610216611de4565b60ff818116838216019081111561021657610216611de4565b601f8211156125ec57806000526020600020601f840160051c810160208510156125c95750805b601f840160051c820191505b818110156125e957600081556001016125d5565b50505b505050565b815167ffffffffffffffff81111561260b5761260b6117d3565b61261f816126198454611ead565b846125a2565b6020601f821160018114612671576000831561263b5750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556125e9565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b828110156126bf578785015182556020948501946001909201910161269f565b50848210156126fb57868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b0190555056fea26469706673582212203cb73eaf3b71503ecdf69a69bd5282048db29650910cc92db800840818fbbad964736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "dnsEncodedReverseName_": "The DNS encoded reverse name.",
          "ens_": "The ENS registry contract.",
          "owner_": "The owner of the contract, able to modify the gateway URLs.",
          "target_": "The target registrar contract on the L2 chain.",
          "urls_": "The verifier gateway URLs.",
          "verifier_": "The gateway verifier contract, unique to each L2 chain."
        }
      },
      "fetchNameCallback(bytes[],uint8,bytes)": {
        "details": "If the returned value is empty, data is returned from the default resolver.",
        "params": {
          "carry": "The address to query the default resolver for, ABI encoded.",
          "values": "The values returned from the verifier contract.               Should be a single value."
        },
        "returns": {
          "_0": "The name for the given address, ABI encoded."
        }
      },
      "gatewayURLs()": {
        "returns": {
          "_0": "The gateway URLs."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolve(bytes,bytes)": {
        "params": {
          "data": "The resolver calldata.",
          "name": "The DNS encoded ENS name to query."
        },
        "returns": {
          "result": "The result of the call."
        }
      },
      "setGatewayURLs(string[])": {
        "params": {
          "urls": "The new gateway URLs."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "L1 Reverse Resolver",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "UnknownResolverProfile(bytes4)": [
        {
          "notice": "Thrown when the resolver profile is unknown."
        }
      ],
      "Unreachable(bytes)": [
        {
          "notice": "Thrown when the name is not reachable in this resolver's namespace."
        }
      ]
    },
    "events": {
      "GatewayURLsChanged(string[])": {
        "notice": "Emitted when the gateway URLs are changed."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets the initial state of the contract."
      },
      "fetchNameCallback(bytes[],uint8,bytes)": {
        "notice": "Callback function, called by the verifier contract."
      },
      "gatewayURLs()": {
        "notice": "Gets the gateway URLs."
      },
      "resolve(bytes,bytes)": {
        "notice": "Resolves and verifies `name` records on the target L2 chain's registrar contract,         or falls back to the default resolver if the name is not found.         Also supports `addr` calls for the L2 chain's reverse namespace,         which resolves to the target L2 chain's registrar contract."
      },
      "setGatewayURLs(string[])": {
        "notice": "Sets the gateway URLs."
      }
    },
    "notice": "Resolves reverse records for an L2 chain. Deployed on the L1 chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/reverseRegistrar/L1ReverseResolver.sol:L1ReverseResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2545,
        "contract": "contracts/reverseRegistrar/L1ReverseResolver.sol:L1ReverseResolver",
        "label": "_urls",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}